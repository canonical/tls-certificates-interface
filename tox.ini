# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.
[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint-v1, lint-v2, static-v1, static-v2, unit-v1, unit-v2

[vars]
src_path = {toxinidir}/src/
lib_v1_path = {toxinidir}/lib/charms/tls_certificates_interface/v1
lib_v2_path = {toxinidir}/lib/charms/tls_certificates_interface/v2
unit_test_v1_path = {toxinidir}/tests/unit/charms/tls_certificates_interface/v1/
unit_test_v2_path = {toxinidir}/tests/unit/charms/tls_certificates_interface/v2/
integration_test_v1_path = {toxinidir}/tests/integration/v1
integration_test_v2_path = {toxinidir}/tests/integration/v2
all_v1_path = {[vars]lib_v1_path} {[vars]unit_test_v1_path} {[vars]integration_test_v1_path}
all_v2_path = {[vars]lib_v2_path} {[vars]unit_test_v2_path} {[vars]integration_test_v2_path}

[testenv]
setenv =
    PYTHONPATH = {toxinidir}:{toxinidir}/lib
    PYTHONBREAKPOINT=ipdb.set_trace
passenv =
    PYTHONPATH
    HOME
    CHARM_BUILD_DIR
    MODEL_SETTINGS

[testenv:fmt-v1]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_v1_path}
    black {[vars]all_v1_path}

[testenv:lint-v1]
description = Check code against coding style standards
deps =
    black
    flake8 == 4.0.1
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    pyproject-flake8
    pep8-naming
    isort
commands =
    pflake8 {[vars]all_v1_path}
    isort --check-only --diff {[vars]all_v1_path}
    black --check --diff {[vars]all_v1_path}


[testenv:fmt-v2]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_v2_path}
    black {[vars]all_v2_path}

[testenv:lint-v2]
description = Check code against coding style standards
deps =
    black
    flake8 == 4.0.1
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    pyproject-flake8
    pep8-naming
    isort
commands =
    pflake8 {[vars]all_v2_path}
    isort --check-only --diff {[vars]all_v2_path}
    black --check --diff {[vars]all_v2_path}

[testenv:static-v1]
description = Run static analysis checks
deps =
    -r{toxinidir}/requirements-dev.txt
    mypy
    types-PyYAML
    pytest
    pytest-operator
    juju
    types-setuptools
    types-toml
setenv =
    PYTHONPATH = ""
commands =
    mypy {[vars]lib_v1_path} {posargs}

[testenv:static-v2]
description = Run static analysis checks
deps =
    -r{toxinidir}/requirements-dev.txt
    mypy
    types-PyYAML
    pytest
    pytest-operator
    juju
    types-setuptools
    types-toml
setenv =
    PYTHONPATH = ""
commands =
    mypy {[vars]lib_v2_path} {posargs}

[testenv:unit-v1]
description = Run unit tests
deps =
    pytest
    coverage[toml]
    -r{toxinidir}/requirements-dev.txt
commands =
    coverage run --source={[vars]lib_v1_path} -m pytest -v --tb native {[vars]unit_test_v1_path} -s {posargs}
    coverage report

[testenv:unit-v2]
description = Run unit tests
deps =
    pytest
    coverage[toml]
    -r{toxinidir}/requirements-dev.txt
commands =
    coverage run --source={[vars]lib_v2_path} -m pytest -v --tb native {[vars]unit_test_v2_path} -s {posargs}
    coverage report

[testenv:integration-v1]
description = Run integration tests
deps =
    juju==3.0.4
    pytest
    git+https://github.com/charmed-kubernetes/pytest-operator.git
    -r{toxinidir}/requirements.txt
commands =
    pytest --asyncio-mode=auto -v --tb native {[vars]integration_test_v1_path} --log-cli-level=INFO -s {posargs}

[testenv:integration-v2]
description = Run integration tests
deps =
    juju==3.0.4
    pytest
    git+https://github.com/charmed-kubernetes/pytest-operator.git
    -r{toxinidir}/requirements.txt
commands =
    pytest --asyncio-mode=auto -v --tb native {[vars]integration_test_v2_path} --log-cli-level=INFO -s {posargs}
